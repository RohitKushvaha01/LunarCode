//libraries can be directly imported from urls
//hash is required
import myLib https://example.com/myLib.jar hash ""

//import classes from myLib
import from myLib com.x.y

//default import
import stdio


//this language is very similar to kotlin
//when a function doesn't require any argument it can be defined without ()

//static block can only be placed outside of functions
static{

   val myNativeLib = try{
    system.load("myNativeLib.so")
    //Exception lambda
   }else{ e ->
        stdio.error(e.toString())

        //throwing runtime exception
        crash(e)
   }finally{

   }

   //define native functions only primitive data types are allowed
   native fun myNativeFunction int myNativeLib.myNativeFunction(int x)


}

fun main{
     //when a function doesn't return anything it will run on a saprate thread unless its defined with "default fun"


     //a fumction that doesnt return anything and doesnt start a thread
     default fun x(){
     }

     //this language follow small latter instead of camelcase
     //fun can have functions too
     fun sayHi(string s){
        stdio.out("HI $s")
     }

     //specify return value like java
     pure fun int add(int x,int y){
        //functions with "pure" cannot access global variables
        return x+y
     }

     math fun int divide(int x,int y){
        //functions with "math" will get compiled to native code and they are also pure
     }

     //similar to kotlin coroutine
     lazy fun file heavy_task{
        val file = ...
        delay(1000)
        return file
     }


     //calling lazy functions requires a implicit lambda in its arguments
     //lazy functions never return anything
     heavy_task{ file ->
          //do something
     }


     // Property-based function
     val name = "MyLanguage"

     fun string version {
         return "1.0.0"
     }

     stdio.out("Using $name version ${version}")


     //pattern matching
     match value {
         is int -> stdio.out("It's an integer")
         is String -> stdio.out("It's a string")
         else -> stdio.out("Unknown type")
     }

     module utilities {
         fun greet(string name) {
             stdio.out("Hello, $name")
         }
     }

     // Usage in another module
     import utilities.greet
     greet("World")

    //trait
    trait Printable {
        fun print()
    }

    class Document : Printable {
        override fun print() {
            stdio.out("Printing document")
        }
    }


    //streams are basically global lambdas
    //lambdas requires kotlin style :
    stream my_stream{ string:s ->
        stdio.out(s)
    }

    my_stream.emit("Hello")


    //system threads
    thread{
        //do something
    }.start()

    //virtual threads
    thread{

    }.start_virtual()


     //lambda shortcuts
     val multiply = math { x, y -> x * y }
     stdio.out(multiply(4, 5))

     val (x, y) = myPoint // myPoint is an object with properties x and y
     stdio.out("X: $x, Y: $y")


     //parallel loops if order is not important
     parallel for i in 1 to 1000 {
         //pause all iterators except this, note : some iterators wont stop until the next iteration
         parallel.pause()

         //completely stop all iterators,note : some iterators wont stop until the next iteration
         parallel.stop()

         //start if paused and continue else start from beginning
         parallel.start()
     }

     //similar to kotlin inlining
     inline fun max(int a,int b) = if (a > b) a else b

     //return the cached value when arguments match
     cache fun int factorial(int n) {
         //cache functions are also pure
         return if (n <= 1) 1 else n * factorial(n - 1)
     }

     val myObj = myObj()

     //manually free objects
     //does not guarantee free
     free(myObj)

     //run garbage collector
     system.gc()


     cache fun int get_size(string s){
        return s.size
     }

     //free cache of a cache function
     free(get_size)


     //simplified functions
     fun add(int y,int x) = x + y

}


